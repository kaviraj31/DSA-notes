#include <stdio.h>
#include <stdlib.h>
struct Edge {
int src, dest, weight;
};
struct Graph {
int V, E;
struct Edge* edge;
};
struct Graph* createGraph(int V, int E) {
struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
graph->V = V;
graph->E = E;
graph->edge = (struct Edge*)malloc(graph->E * sizeof(struct Edge));
return graph;
}
int find(int parent[], int i) {
if (parent[i] == -1) return i;
return find(parent, parent[i]);
}
void Union(int parent[], int x, int y) {
int xset = find(parent, x);
int yset = find(parent, y);
if (xset != yset) parent[xset] = yset;

}
int compare(const void* a, const void* b) {
return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}
void kruskalMST(struct Graph* graph) {
int V = graph->V;
struct Edge result[V]; 
int e = 0; 
qsort(graph->edge, graph->E, sizeof(graph->edge[0]), compare);
struct Edge output[V - 1];
int parent[V];
for (int i = 0; i < V; i++) parent[i] = -1;
for (int i = 0; e < V - 1; i++) {
struct Edge next_edge = graph->edge[i];
int x = find(parent, next_edge.src);
int y = find(parent, next_edge.dest);
if (x != y) {
output[e++] = next_edge;
Union(parent, x, y);
}
}
printf("Edges in MST:\n");
for (int i = 0; i < e; i++) {
printf("%d - %d, Weight: %d\n", output[i].src, output[i].dest, 
output[i].weight);
}
}
int main() {

int V = 4; 
int E = 5; 
struct Graph* graph = createGraph(V, E);
graph->edge[0].src = 0;
graph->edge[0].dest = 1;
graph->edge[0].weight = 10;
graph->edge[1].src = 0;
graph->edge[1].dest = 2;
graph->edge[1].weight = 6;
graph->edge[2].src = 0;
graph->edge[2].dest = 3;
graph->edge[2].weight = 5;
graph->edge[3].src = 1;
graph->edge[3].dest = 3;
graph->edge[3].weight = 15;
graph->edge[4].src = 2;
graph->edge[4].dest = 3;
graph->edge[4].weight = 4;
kruskalMST(graph);
return 0;
}