#include <stdio.h>
#include <stdlib.h>


int MAX(int a ,int b)
{
    if(a>=b)
        return a;
    return b;
}

int stack[100];
int top = -1;

void push(int val) {
    stack[++top] = val;
}

int pop() {
    return stack[top--];
}

int largestRectangleArea(int heights[], int n) {
    // int* left = (int*)malloc(n * sizeof(int));
    // int* right = (int*)malloc(n * sizeof(int));
    
    int left[n];
    int right[n];

    for (int i = 0; i < n; ++i) {
        while (top >= 0 && heights[stack[top]] >= heights[i]) {
            pop();
        }
        if (top >= 0) {
            left[i] = stack[top]+1;
        } else {
            left[i] = 0;
        }
        push(i);
    }
    

    top = -1;

    for (int i = n - 1; i >= 0; --i) {
        while (top >= 0 && heights[stack[top]] >= heights[i]) {
            pop();
        }
        if (top >= 0) {
            right[i] = stack[top]-1;
        } else {
            right[i] = n-1;
        }
        push(i);
    }
   

    int maxArea = 0;

    for (int i = 0; i < n; ++i) {
        maxArea = MAX(maxArea, (right[i] - left[i] + 1) * heights[i]);
    }

   

    return maxArea;
}

int main() {
    int n;
    printf("enter the size of array:");
    scanf("%d",&n);
    int heights[n];
    printf("enter the the heights of bars(array elements):");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&heights[i]);
    }
    
 

    int result = largestRectangleArea(heights, n);
    printf("The area of the largest rectangle in the histogram is: %d\n", result);

    return 0;
}